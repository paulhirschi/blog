---
title: "Discrete Distributions for Binary Data"
description: "Binomial, Geometric, Negative Binomial, and Hypergeometric."
author: "Paul H"
date: "2024-04-16"
categories: [statistics]
---

```{python}
#| echo: false
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

def get_plt_dems(ratio='w', height=5):
    plt_aspect_wide = 16 / 10
    plt_aspect_tall = 10 / 16
    plt_aspect_square = 1 / 1

    if ratio == 'w':
        return (height * plt_aspect_wide, height)
    if ratio == 't':
        return (height * plt_aspect_tall, height)
    if ratio == 's':
        return (height * plt_aspect_square, height)

palette_colors = [
    '#0755db',
    '#c237be',
    '#ff2b86',
    '#ff6749',
    '#ffa600',
]

grey = '#93a1a1'
blue = palette_colors[0]
red = palette_colors[2]
yellow = palette_colors[4]

palette = sns.color_palette(palette_colors)
sns.set_theme(palette=palette)
plt.style.use("ggplot")

title_font = {
    'fontfamily': 'sans-serif',
    'fontsize': 'xx-large',
    'horizontalalignment': 'center',
    'verticalalignment': 'top',
}

subtitle_font = {
    'fontfamily': 'sans-serif',
    'fontsize': 'large',
    'horizontalalignment': 'center',
    'verticalalignment': 'top',
    'alpha': 0.7,
}


```

## Definitions:

* **Discrete Variable:**
* **Random Variable:**
* **Probability Distribution:**

```{python}
#| echo: false

from scipy.stats import binom

n, p = 10, 0.1667
scale = 0.0001

x = np.arange(binom.ppf(scale, n, p),
              binom.ppf(1 - scale, n, p), dtype=np.int8)

fig, ax = plt.subplots(figsize=get_plt_dems())
# plt.suptitle('Binomial Distribution\nn=10, p=0.1667')
colors = [blue if x >= 4 else grey for x in x]
plot_args = {
    'ax': ax,
    'palette': colors,
    'hue': x,
    'legend': False,
    'width': 0.9
}
sns.barplot(x=x, y=binom.pmf(x, n, p), **plot_args)
plt.text(3, 0.4, 'Binomial Distribution', **title_font)
plt.text(3,0.37, f'n = {n}, p = {p}', **subtitle_font)
ax.set_ylabel('Probability')
ax.set_xlabel('Number of 6s')
fig.tight_layout()
plt.show()
```
